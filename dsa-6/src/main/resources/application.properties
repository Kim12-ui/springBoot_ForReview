# Spring Boot DevTools
# Lombok
# Spring Web
# Spring Web

# Spring Data JPA
# MySQL Driver

spring.application.name=dsa-6
server.port=9996
server.servlet.context-path=/web6

logging.level.root=info
logging.level.com.dsa.web6=debug

# 1. MySql 설정
spring.datasource.dbcp2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/springJPA?ServerTimezone=Asia/Seoul
spring.datasource.username=abcd
spring.datasource.password=abcd

# 2. JPA 설정

# (1) JPA가 실행하는 SQL 쿼리를 콘솔에 출력하는 설정
spring.jpa.show-sql=true

# (2) DDL(create,alter,drop) 정의시 DB 고유 기능 사용 가능
# - create: 기존 테이블을 삭제하고 새로 생성 [drop+create]
# - create-drop: create 속성에 추가로 애플리케이션을 종료할 때 생성한 DDL 제거
# - update: DB테이블과 엔티티 매핑정보를 비교해서 변경 사항만 수정 [테이블 없으면 create]
# - validate: DB테이블과 엔티티 매핑정보를 비교해서 차이가 있으면 경고 후 실행X
# - none: 자동 생성 기능을 사용하지 않음
spring.jpa.hibernate.ddl-auto=update

# (3) Hibernate가 실행하는 SQL 쿼리를 콘솔에 출력
spring.jpa.properties.hibernate.show_sql=true

# (4) 출력되는 SQL 쿼리를 가독성 좋게 포매팅하여 출력
spring.jpa.properties.hibernate.format_sql=true

# (5) MySQL 8을 사용하고 있으므로 해당 설정
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# (6) Hibernate의 SQL 유형 로그 레벨을 trace로 설정
logging.level.org.hibernate.type.descriptor.sql=trace

# 3. JPA: Java Persistence API
# Persistence: 영원히 계속되는 성질이나 능력
# => JAVA객체를 저장시키는 방법 / DB테이블에 데이터를 저장시키는 방법

# JDBC API
# JAVA - JDBC - DRIVER - ORACLE
#				DRIVER - MYSQL
#				DRIVER - H2...

# 만약 식당을 운영해서
# 사장: 매출관리, 직원관리...
# 셰프: 요리재료관리, 요리...
# 종업원: 홀 서빙, 손님응대
# 역할을 맡았다 친다

# 그런데 식당이 운영이 너무 잘되어서 2호점을 낸다고 치면
# 사장, 종업원, 셰프등의 역할을 (1호점을 제외한) 다른 사람이 그 역할을 하게 시킨다

# 여기서 JAVA - JDBC - DB 를 연결시켜주는 역할 => JPA

# JPA의 방식 2가지
# (1) SQL Mapping (ex) Mybatis)
# (2) OR Mapping

# 4. DI (Dependency Injection): 의존 주입 & 종속성 주입
# => 부품 조립 (객체끼리 연결시켜주는 역할)

# JAVA
# class A {B b = new B();} => A클래스가 B란 클래스를 소유(HAS A)한다
# # A a = new A(); => A가 생성되면 자동으로 B가 생성된다

# 예시
# class A {B b = new B();}
# class B {int num=10;}

# 메인 함수 실행
# public static void main(String[] args) {A a=new A(); int number=a.b.num;}
# => 이러면 결합도 높은 뭐시기가 만들어짐

# 예시2
# class A {
# B b; // 필드 주입
# public A(B b) {this.b=b;} // 생성자 주입
# public void setB(B b) {this.b=b;} // 세터 주입
# }
# 무조건 A를 만들어져야 B가 만들어지는 불상사를 방지
# 독립성이 좀 더 증가한다

# 메인 함수 실행
# public static void main(String[] args) {
# B b = new B(); // 여기는 부품 (Dependency)
# A a = new A(); 
# a.setB(b); // 여기는 주입, 조립 (Injection)
# }